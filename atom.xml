<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-06-12T09:53:20.905Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>uniapp相关</title>
    <link href="http://example.com/2024/06/12/uniapp%E7%9B%B8%E5%85%B3/"/>
    <id>http://example.com/2024/06/12/uniapp%E7%9B%B8%E5%85%B3/</id>
    <published>2024-06-12T08:30:51.478Z</published>
    <updated>2024-06-12T09:53:20.905Z</updated>
    
    <content type="html"><![CDATA[<h3 id="初识uniapp"><a href="#初识uniapp" class="headerlink" title="初识uniapp"></a>初识uniapp</h3><p>uniapp是一种基于vue.js的跨平台开发框架，它可以一套代码构建同时在运行在多个平台（iOS、Android、小程序）上的应用程序。</p><h3 id="如何实现跨平台的"><a href="#如何实现跨平台的" class="headerlink" title="如何实现跨平台的"></a>如何实现跨平台的</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、基于WebView：uniapp使用了各平台提供的原生webview容器作为运行环境，通过webview来加载页面从而实现跨端</span><br><span class="line">2、通用API：uniapp提供了一套通用的api用于不同平台的接口调用方式，开发者可以通过这个api实现跨平台的逻辑。</span><br><span class="line">3、编译打包：通过编译打包的方式生成各个平台的应用程序，开发者编写的代码会被编译成为各个平台所对应的原生代码。</span><br><span class="line">4、平台差异处理：uniapp框架会根据不同平台特性，在编译阶段对代码进行转换和适配，处理各平台之间的差异。</span><br></pre></td></tr></table></figure></div><p>Uni-App的跨平台是通过封装和抽象各平台的能力，提供统一的接口开发和打包编译方式，是开发者可以使用一套代码同时在多个平台上运行应用程序。</p><h3 id="编译器和运行时（runtime）"><a href="#编译器和运行时（runtime）" class="headerlink" title="编译器和运行时（runtime）"></a>编译器和运行时（runtime）</h3><p>uni-app分编译器和运行时（runtime），实现一套代码，多端运行主要是这两部分配合完成的，编译器将开发者的代码进行编译，编译的输出物由每个平台各自的runtime进行解析。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、在web平台，将.vue文件编译为js代码。</span><br><span class="line">2、在微信小程序平台，编译器将.vue文件拆分生成wxml、wxss、js等代码。</span><br><span class="line">3、在app平台，将.vue文件编译为js代码。如果涉及uts代码，在Android平台，将.uts文件编译为kotlin代码；在iOS平台，将.uts文件编译为swift代码。</span><br></pre></td></tr></table></figure></div><p>编译器vue2版：基于wepback实现；vue3版：基于Vite实现。性能更快。</p><p>编译器支持条件编译，即可以指定某部分代码只编译到特定的终端平台。从而将公用和个性化融合在一个工程中。</p><p>uni-app runtime包括3部分：基础框架、组件、API。</p><p>基础框架：包括语法、数据驱动、全局文件、应用管理、页面管理、js引擎、渲染和排版引擎等</p><p>组件：</p><p>runtime中包括的组件只有基础组件，如<code>&lt;view&gt;</code>、<code>&lt;button&gt;</code>等。扩展组件不包含在uni-app的runtime中，而是下载到用户的项目代码中。</p><p>API：<br>uni-app runtime内置了大量常见的、跨端的 API，比如联网(uni.request)、读取存储(uni.getStorage)。<br>同时uni-app不限制各端原生平台的API调用。开发者可以在uni-app框架中无限制的调用该平台所有能使用的API。</p><h3 id="uniapp的功能框架图"><a href="#uniapp的功能框架图" class="headerlink" title="uniapp的功能框架图"></a>uniapp的功能框架图</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/uniapp-fs.png"                      alt="alt text"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;初识uniapp&quot;&gt;&lt;a href=&quot;#初识uniapp&quot; class=&quot;headerlink&quot; title=&quot;初识uniapp&quot;&gt;&lt;/a&gt;初识uniapp&lt;/h3&gt;&lt;p&gt;uniapp是一种基于vue.js的跨平台开发框架，它可以一套代码构建同时在运行在多个平台（</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Podfile中的use_frameworks</title>
    <link href="http://example.com/2024/06/07/Podfile%E4%B8%AD%E7%9A%84use-frameworks/"/>
    <id>http://example.com/2024/06/07/Podfile%E4%B8%AD%E7%9A%84use-frameworks/</id>
    <published>2024-06-07T10:25:45.000Z</published>
    <updated>2024-06-07T11:08:43.182Z</updated>
    
    <content type="html"><![CDATA[<h3 id="use-frameworks-生效的条件"><a href="#use-frameworks-生效的条件" class="headerlink" title="use_frameworks!生效的条件"></a>use_frameworks!生效的条件</h3><p>1、use_frameworks!只会在第三方库的podspec文件中没有设置s.static_framework &#x3D; true&#x2F;falue时有效，如果第三方库的podspec文件中设置了s.static_framework &#x3D; true&#x2F;false， 那么依podspec中的设置为准。</p><p>2、第三方库必须是源代码，否则也不生效。比如：原来是.a,.framework静态库，那么不管Podfile中是否添加use_frameworks!都不会影响原来的结果。</p><blockquote><p>库其实就是编译好的二进制文件+头文件+相关的资源文件。<br>静态库（.a）：在编译时会将库copy一份到目标程序中进行合并，编译完成之后，目标程序不依赖外部的库进行运行，缺点是会使应用程序变大<br>动态库（.dylib）：编译时只存储了指向动态库的引用。可以多个程序指向这个库，在运行时才加载然后动态链接，优点不会使体积变大。<br>Framework：实际上是一种打包方式，打出来的包可以是动态库也可以是静态库。它是将库的二进制文件，头文件和有关的资源文件打包到一起，方便管理和分发。</p></blockquote><p>对于CocoaPods管理的第三方库是否使用的Framework，可以通过Podfile中的use_frameworks来控制在Podfile中如果不加use_frameworks!，cocoapods会生成相应的 .a文件（静态链接库）， Link Binary With Libraries: libPods-xxx.a 包含了其他用pod导入有第三库的.a文件</p><p>使用了use_frameworks!，cocoapods会生成对应的frameworks文件（包含了头文件，二进制文件，资源文件等等）Link Binary With Libraries：Pods_xxx.framework包含了其它用pod导入的第三方框架的.framework文件。</p><h3 id="iOS项目中use-frameworks-的使用场景"><a href="#iOS项目中use-frameworks-的使用场景" class="headerlink" title="iOS项目中use_frameworks!的使用场景"></a>iOS项目中use_frameworks!的使用场景</h3><h5 id="1、不使用frameworks的场景"><a href="#1、不使用frameworks的场景" class="headerlink" title="1、不使用frameworks的场景"></a>1、不使用frameworks的场景</h5><p>纯oc项目中 通过pod导入纯oc项目</p><h5 id="2、使用frameworks的场景"><a href="#2、使用frameworks的场景" class="headerlink" title="2、使用frameworks的场景"></a>2、使用frameworks的场景</h5><p>swift 项目中通过pod导入swift项目，必须要使用use_frameworks！，否则报错，在需要使用的到地方 import xxx</p><h5 id="3、可加可不加的场景"><a href="#3、可加可不加的场景" class="headerlink" title="3、可加可不加的场景"></a>3、可加可不加的场景</h5><p>swift 项目中通过pod导入OC项目<br>1、使用use_frameworks，在桥接文件里加上#import “xxxx&#x2F;xxxx.h<br>2、不使用frameworks，桥接文件加上 #import “xxxx.h”</p><h3 id="use-frameworks-何时生效"><a href="#use-frameworks-何时生效" class="headerlink" title="use_frameworks!何时生效"></a>use_frameworks!何时生效</h3><p>use_frameworks!是否生效依赖于podspec指向的第三库的实际情况。</p><h3 id="use-frameworks-不生效场景"><a href="#use-frameworks-不生效场景" class="headerlink" title="use_frameworks!不生效场景"></a>use_frameworks!不生效场景</h3><p>1、如果podspec指向的第三库自己本身就是一个.a 静态库，或者.framework 静态库，<br>podfile是否使用use_framework<br>集成到主工程后，没有区别,都是在app资源包下，与app主二进制可执行程序集合成一个整体执行文件</p><p>2、如果组件库是.framework 动态库<br>那么无论podfile是否使用use_framework都没啥区别，都是在app资源包下面的framework目录下。</p><p>3、podspec 既有静态库又有动态库<br>静态库链接到可执行文件中去。动态库在Frameworks下app启动动态链接。</p><h3 id="use-frameworks-生效场景"><a href="#use-frameworks-生效场景" class="headerlink" title="use_frameworks!生效场景"></a>use_frameworks!生效场景</h3><p>依赖的pod组件库是源代码。<br>如果在podfile中使用了use_framework，会打成动态库framework,放到app Frameworks目录下。 app启动时，动态链接。<br>如果是不用useframework，会编译成.a，随着编译一起打进app二进制可执行程序内。</p><p>当在podfile文件中使用use_frameworks!指令时，CocoaPod在安装Pod时，会用framework方式组织资源（默认使用lib方式）<br>同时该指令还提供扩展选项，指定动态framework或者静态framework<br>use_frameworks! #使用默认值，根据podspec 类型自行设置static或者dynamic<br>use_frameworks! :linkage &#x3D;&gt; :static # 使用静态链接<br>use_frameworks! :linkage &#x3D;&gt; :dynamic #使用动态链接</p><p>当在podfile中设置了use_frameworks! ，但是没有指定linkage &#x3D;&gt; :static或linkage &#x3D;&gt; :dynamic时，则会根据podspec文件中的根配置static_framework &#x3D; true&#x2F;false来设置。<br>和use_frameworks!的起作用条件一样，即使在use_frameworks!后面加了linkage &#x3D;&gt; :static或linkage &#x3D;&gt; :dynamic，也只对源码Pod有效，对已经是framework的pod不起作用。<br>注意：如果pod中的framework是动态库，那么在pod install后，会在相应的target的Build Phases设置中添加[cp] Embed Pods Frameworks脚本，以动态库的方式将framework输出到最终产物中。</p><p>如果在podspec中既有 静态库，又有动态库：</p><p>s.dependency ‘xxx’ &#x2F;&#x2F;是一个动态库<br>s.dependency ‘yyy’ &#x2F;&#x2F;是静态库</p><p>那么在Podfile中：<br>1、不使用：use_frameworks!<br>或者使用：use_frameworks! :linkage &#x3D;&gt; :static<br>按照静态库进行编译，则可以编译通过.</p><p>2、使用：use_frameworks!<br>或者使用 use_frameworks! :linkage &#x3D;&gt; :dynamic<br>进行动态库进行编译时，就会pod install报错.</p><p>详见: <a class="link"   href="https://www.cnblogs.com/zhou--fei/p/18066471" >https://www.cnblogs.com/zhou--fei/p/18066471 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;use-frameworks-生效的条件&quot;&gt;&lt;a href=&quot;#use-frameworks-生效的条件&quot; class=&quot;headerlink&quot; title=&quot;use_frameworks!生效的条件&quot;&gt;&lt;/a&gt;use_frameworks!生效的条件&lt;/h3&gt;&lt;</summary>
      
    
    
    
    <category term="Framework" scheme="http://example.com/categories/Framework/"/>
    
    
  </entry>
  
  <entry>
    <title>图片转webp</title>
    <link href="http://example.com/2024/06/07/%E5%9B%BE%E7%89%87%E8%BD%ACwebp/"/>
    <id>http://example.com/2024/06/07/%E5%9B%BE%E7%89%87%E8%BD%ACwebp/</id>
    <published>2024-06-07T07:35:32.000Z</published>
    <updated>2024-06-07T11:07:03.168Z</updated>
    
    <content type="html"><![CDATA[<p>图片转为webp格式的方式有很多种，包括在线工具、图像编辑软件、命令行工具。本文以命令行工具为例说明。</p><h2 id="使用命令行工具（cwebp）"><a href="#使用命令行工具（cwebp）" class="headerlink" title="使用命令行工具（cwebp）"></a>使用命令行工具（cwebp）</h2><p>使用命令行工具如<code>cwebp</code>来进行转换。</p><h3 id="安装cwebp"><a href="#安装cwebp" class="headerlink" title="安装cwebp"></a>安装<code>cwebp</code></h3><p>1、对于Windows用户，可以从<code>Google WebP</code>下载。</p><p>2、macOS用户，可以使用Homebrew进行安装：</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install webp</span><br></pre></td></tr></table></figure></div><h3 id="转化图片"><a href="#转化图片" class="headerlink" title="转化图片"></a>转化图片</h3><p>1、打开命令行工具。</p><p>2、使用以下命令将图片转换为WebP格式：</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cwebp input.jpg -o output.webp</span><br></pre></td></tr></table></figure></div><p><font color=red>注意：</font>其中，input.jpg是你的输入图片文件名，output.webp是输出的WebP文件名。</p><p>该命令执行后，你的图片将转为webp格式。<br>祝你好运～</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;图片转为webp格式的方式有很多种，包括在线工具、图像编辑软件、命令行工具。本文以命令行工具为例说明。&lt;/p&gt;
&lt;h2 id=&quot;使用命令行工具（cwebp）&quot;&gt;&lt;a href=&quot;#使用命令行工具（cwebp）&quot; class=&quot;headerlink&quot; title=&quot;使用命令行</summary>
      
    
    
    
    <category term="WEBP" scheme="http://example.com/categories/WEBP/"/>
    
    
    <category term="webp" scheme="http://example.com/tags/webp/"/>
    
  </entry>
  
  <entry>
    <title>Hexo配置后页面404</title>
    <link href="http://example.com/2024/06/07/Hexo%E9%85%8D%E7%BD%AE%E5%90%8E%E9%A1%B5%E9%9D%A2404/"/>
    <id>http://example.com/2024/06/07/Hexo%E9%85%8D%E7%BD%AE%E5%90%8E%E9%A1%B5%E9%9D%A2404/</id>
    <published>2024-06-07T05:30:05.254Z</published>
    <updated>2024-06-07T08:32:43.772Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搭建博客有许多种方法，本文以Hexo举例"><a href="#搭建博客有许多种方法，本文以Hexo举例" class="headerlink" title="搭建博客有许多种方法，本文以Hexo举例"></a>搭建博客有许多种方法，本文以Hexo举例</h2><p>使用 Hexo 搭建个人网站的可能不少人见到过这张图</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/page404.png"                      alt="alt text"                ><br>出现404的情况有很多种，下面来分析可能性：</p><h3 id="1、github-仓库名称不匹配"><a href="#1、github-仓库名称不匹配" class="headerlink" title="1、github 仓库名称不匹配"></a>1、github 仓库名称不匹配</h3><p>想要部署自己的 <code>github.io</code>，前提要在在 github 上面创建仓库。<br>在 <code>github</code> 上面创建的仓库名称没有使用自己的 <code>github</code> 账号名称，你创建的仓库名称需要是 <code>账户名.github.io</code>，如果不是这种命名是无法访问你的博客网站的。</p><h3 id="2、配置文件错误"><a href="#2、配置文件错误" class="headerlink" title="2、配置文件错误"></a>2、配置文件错误</h3><p>在你的本地博客目录下（例如你创建的根目录文件名是bolg，注意不是 themes 主题目录下的那个配置文件），根目录下有配置文件 _config.yml，里面内容是这样的：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">#deploy: git@github.com:账户名/账户名.github.io.git</span><br><span class="line">#type: git</span><br></pre></td></tr></table></figure></div><p>需要修改(<font color=Red>冒号后有空格</font>)：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:账户名/账户名.github.io.git</span><br><span class="line">  branch: main</span><br><span class="line">  #message: [message]</span><br></pre></td></tr></table></figure></div><h3 id="3、分支错误"><a href="#3、分支错误" class="headerlink" title="3、分支错误"></a>3、分支错误</h3><p>在 <code>github</code> 上面创建 <code>repo</code>，默认分支名称是 <code>main</code> 而不是 <code>master</code>。</p><p>可能存在你本地 <code>Hexo</code> 提交（<code>hexo d</code> 命令）的默认是去了 <code>master</code> 分支，这样访问也是没有内容的。</p><h3 id="4、依赖问题"><a href="#4、依赖问题" class="headerlink" title="4、依赖问题"></a>4、依赖问题</h3><p>检查依赖安装是否有不全的情况，可以使用 <code>npm list</code> 命令</p><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm list --depth 0</span><br></pre></td></tr></table></figure></div><p>如果检查有问题，会在控制台提示类似 <code>npm ERR! missing xxxxx</code>。</p><h3 id="5、其他原因"><a href="#5、其他原因" class="headerlink" title="5、其他原因"></a>5、其他原因</h3><p>也会因为<code>node</code>版本的原因导致该原因。官方给出的兼容性如下图： </p><table><thead><tr><th align="center">Hexo 版本</th><th align="center">最低兼容 Node.js 版本</th></tr></thead><tbody><tr><td align="center">6.0+</td><td align="center">12.13.0</td></tr><tr><td align="center">5.0+</td><td align="center">10.13.0</td></tr><tr><td align="center">4.1 - 4.2</td><td align="center">8.10</td></tr><tr><td align="center">4.0</td><td align="center">8.6</td></tr><tr><td align="center">3.3 - 3.9</td><td align="center">6.9</td></tr><tr><td align="center">3.2 - 3.3</td><td align="center">0.12</td></tr><tr><td align="center">3.0 - 3.1</td><td align="center">0.10 or iojs</td></tr><tr><td align="center">0.0.1 - 2.8</td><td align="center">0.10</td></tr></tbody></table><p>如果出现该问题，使用node版本管理工具nvm，安装对应的node版本即可，如：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1、nvm install v20.8.1 (安装对应的版本号)</span><br><span class="line"></span><br><span class="line">2、nvm use 20 （切到node@20环境）</span><br><span class="line"></span><br><span class="line">3、node -v （验证是否切成功）</span><br><span class="line"></span><br><span class="line">4、hexo clean</span><br><span class="line"></span><br><span class="line">5、hexo g</span><br><span class="line"></span><br><span class="line">6、hexo d</span><br></pre></td></tr></table></figure></div><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>以上问题排查一遍之后，若出现按照上述说明该后，我们再次打开自己的网站，咿～ 正常了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;搭建博客有许多种方法，本文以Hexo举例&quot;&gt;&lt;a href=&quot;#搭建博客有许多种方法，本文以Hexo举例&quot; class=&quot;headerlink&quot; title=&quot;搭建博客有许多种方法，本文以Hexo举例&quot;&gt;&lt;/a&gt;搭建博客有许多种方法，本文以Hexo举例&lt;/h2&gt;&lt;</summary>
      
    
    
    
    <category term="Hexo" scheme="http://example.com/categories/Hexo/"/>
    
    
  </entry>
  
</feed>
